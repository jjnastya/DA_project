/* ===== BLOCK: Block 1 ===== */

/* ===== CODE: LAUNCH_SITE_T1 ===== */

create or replace table LAUNCH_SITE_T1 (
  --ID_LAUNCHSITE number autoincrement start 1 increment 1,
  LS_NAME varchar,
  LS_FULLNAME VARCHAR,
  LS_COUNTRY varchar,
  LONGITUDE VARCHAR,
  LATITUDE VARCHAR
  );

INSERT INTO LAUNCH_SITE_T1 (LS_NAME, LS_COUNTRY, LS_FULLNAME, LONGITUDE, LATITUDE)
SELECT "countSite" AS LS_NAME,
       "StateCode" AS LS_COUNTRY,
       "Name" AS LS_FULLNAME,
       CASE WHEN "Longitude"='' OR "Longitude"='-'THEN NULL
   WHEN TRY_CAST("Longitude" AS FLOAT) IS NULL THEN NULL
  ELSE "Longitude" 
  END AS  LONGITUDE,
       CASE WHEN "Latitude"='' OR "Latitude"='-' THEN NULL 
   WHEN TRY_CAST("Latitude" AS FLOAT) IS NULL THEN NULL
  ELSE "Latitude" 
  END AS LATITUDE
FROM "Lauch-site-jonathan--sites";

/* ===== CODE: LAUNCH_SITE_T2 ===== */

create or replace table LAUNCH_SITE_T2 (
  ID_LAUNCHSITE number autoincrement start 1 increment 1,
  LS_NAME varchar,
  PIECE_LS varchar
  );

INSERT INTO LAUNCH_SITE_T2 (LS_NAME, PIECE_LS)
SELECT "Launch_Site" AS LS_NAME,
"Piece" AS PIECE_LS
FROM "Launchlog-launchlog";

/* ===== BLOCK: Block 2 ===== */

/* ===== CODE: LAUNCH_SITE_ALLT ===== */

CREATE OR REPLACE TABLE LAUNCH_SITE_ALLT AS
SELECT
    DENSE_RANK() OVER (ORDER BY LST1.LS_NAME) AS ID_LAUNCHSITE,
    LST1.LS_NAME,
    LST2.PIECE_LS,
    LST1.LS_FULLNAME,
    LST1.LS_COUNTRY,
    LST1.LONGITUDE,
    LST1.LATITUDE
FROM 
    LAUNCH_SITE_T1 AS LST1
LEFT JOIN 
    LAUNCH_SITE_T2 AS LST2 ON LST1.LS_NAME = LST2.LS_NAME;

/* ===== BLOCK: Block 3 ===== */

/* ===== CODE: TLAUNCH_VEHICLE1 ===== */

create or replace table TLAUNCH_VEHICLE1 (
  LV_NAME varchar,
  CLASS varchar
  );

INSERT INTO TLAUNCH_VEHICLE1 (LV_NAME, CLASS)  
SELECT 
    "countLV_Name" AS LV_NAME,
    "Class" as CLASS 
FROM "Launch-vehicle-jonathan-lv";

/* ===== CODE: TLAUNCH_VEHICLE2 ===== */

create or replace table TLAUNCH_VEHICLE2 (
  LV_NAME varchar,
  PIECE_LS varchar
  );

INSERT INTO TLAUNCH_VEHICLE2 (LV_NAME,PIECE_LS)    
SELECT 
    "LV_Type" AS LV_NAME,
    "Piece" AS PIECE_LS
FROM "Launchlog-launchlog"
;

/* ===== BLOCK: Block 4 ===== */

/* ===== CODE: LAUNCH_VEHICLE_ALLT ===== */

CREATE OR REPLACE TABLE LAUNCH_VEHICLE_ALLT AS
SELECT DISTINCT
    DENSE_RANK() OVER (ORDER BY LVT2.LV_NAME) AS ID_LAUNCHVEHICLE,
    LVT2.LV_NAME,
    LVT2.PIECE_LS,
    LVT1.CLASS
FROM 
    TLAUNCH_VEHICLE2 AS LVT2
LEFT JOIN 
    TLAUNCH_VEHICLE1 AS LVT1 ON LVT2.LV_NAME = LVT1.LV_NAME;

SELECT *
FROM LAUNCH_VEHICLE_ALLT;

ALTER TABLE LAUNCH_VEHICLE_ALLT ADD COLUMN ID_LAUNCHSITE NUMBER;

UPDATE LAUNCH_VEHICLE_ALLT AS LVAT
SET LVAT.ID_LAUNCHSITE = LSAT.ID_LAUNCHSITE
FROM LAUNCH_SITE_ALLT AS LSAT
WHERE LVAT.PIECE_LS = LSAT.PIECE_LS;

ALTER TABLE LAUNCH_VEHICLE_ALLT DROP COLUMN PIECE_LS;

/* ===== BLOCK: Block 5 ===== */

/* ===== CODE: LAUNCH_FINALT ===== */

create or replace table LAUNCH_FINALT (
  ID_LAUNCH number autoincrement start 1 increment 1,
  DATE_OF_LAUNCH varchar,
  TIME_OF_LAUNCH varchar,
  PIECE VARCHAR,
  ID_LAUNCHSITE NUMBER,
  SUCCESS_RATE VARCHAR
  )
  ;

INSERT INTO LAUNCH_FINALT ( DATE_OF_LAUNCH,TIME_OF_LAUNCH, PIECE,ID_LAUNCHSITE, SUCCESS_RATE)
SELECT
         left ("Launch_Date", 11) AS DATE_OF_LAUNCH 
        , CASE
            WHEN LENGTH("Launch_Date") = 11
                THEN NULL  -- No time component in this format
            WHEN LENGTH("Launch_Date") = 16
                THEN concat(left(right("Launch_Date", 4),2),':',left(right("Launch_Date", 2),2))

            WHEN LENGTH("Launch_Date") = 17
                THEN concat(left(right("Launch_Date", 5),2),':',left(right("Launch_Date", 3),2))
                
            WHEN LENGTH("Launch_Date") = 19
                THEN concat(left(right("Launch_Date", 7),2),':',left(right("Launch_Date", 5),2)) 

            WHEN LENGTH("Launch_Date") = 20
                THEN concat(left(right("Launch_Date", 8),2),':',left(right("Launch_Date", 6),2)) 
            ELSE null
            end AS TIME_OF_LAUNCH
        , "Piece" as PIECE
  , NULL AS ID_LAUNCHSITE
  , "Launch_Code" AS SUCCESS_RATE
    FROM "Launchlog-launchlog";

UPDATE LAUNCH_FINALT AS LFT
SET LFT.ID_LAUNCHSITE = LSAT.ID_LAUNCHSITE
FROM LAUNCH_SITE_ALLT AS LSAT
WHERE LFT.PIECE = LSAT.PIECE_LS;

UPDATE LAUNCH_FINALT
SET SUCCESS_RATE = SUBSTR(SUCCESS_RATE, 2, 1);

/* ===== BLOCK: Block 6 ===== */

/* ===== CODE: OWNER ===== */

create or replace table OWNER (
  ID_OWNER number autoincrement start 1 increment 1,
  OWNER_NAME varchar,
  OWNER_COUNTRY varchar,
  ID_SATELLITE varchar
  );

INSERT INTO OWNER (OWNER_NAME, OWNER_COUNTRY, ID_SATELLITE)
        SELECT "SatOwner" AS OWNER_NAME
        , "SatState" AS OWNER_COUNTRY
        , "Piece" AS SATELLITE_ID
    FROM "Launchlog-launchlog";

/* ===== BLOCK: Block 7 ===== */

/* ===== CODE: AGENCY ===== */

create or replace table AGENCY (
  ID_AGENCY number autoincrement start 1 increment 1,
  AGENCY_NAME varchar
  );

INSERT INTO AGENCY (AGENCY_NAME)
SELECT DISTINCT "Agency" AS AGENCY_NAME
FROM "Launchlog-launchlog";

/* ===== CODE: AGENCY_2 ===== */

create or replace table AGENCY_2 (
  AGENCY_NAME_ALL varchar,
  AGENCY_COUNTRY_ALL varchar,
  AGENCY_FULL_NAME varchar
  );

INSERT INTO AGENCY_2 (AGENCY_COUNTRY_ALL, AGENCY_NAME_ALL, AGENCY_FULL_NAME)
SELECT "StateCode" AS AGENCY_COUNTRY_ALL,
"Code" AS AGENCY_NAME_ALL,
"Name" AS AGENCY_FULL_NAME
FROM "organizations-orgs--2-";

/* ===== BLOCK: Block 8 ===== */

/* ===== CODE: AGENCY_COMPLETE ===== */

create or replace table AGENCY_COMPLETE as
    select 
        A1.ID_AGENCY, 
        A1.AGENCY_NAME,
        A2.AGENCY_COUNTRY_ALL AS AGENCY_COUNTRY,
        A2.AGENCY_FULL_NAME
    from AGENCY as A1
        left join AGENCY_2 as A2
        on A1.AGENCY_NAME = A2.AGENCY_NAME_ALL;

update agency_complete
    set
        agency_country = case 
            when agency_country is null then 'international'
            else agency_country 
        end,
        agency_full_name = case 
            when agency_full_name is null then agency_name
            else agency_full_name
        end;

/* ===== BLOCK: Block 9 ===== */

/* ===== CODE: PURPOSE,CLASS,ENDS ===== */

create or replace table PURPOSE (
  ID_SATELLITE varchar,
  PURPOSE varchar,
  CLASS varchar,
  END_OF_TRANSMISSION varchar,
  END_OF_OPERATION varchar
  );

INSERT INTO PURPOSE (ID_SATELLITE, PURPOSE, CLASS, END_OF_TRANSMISSION, END_OF_OPERATION)
SELECT "Piece" AS ID_SATELLITE,
"Category" AS PURPOSE,
"Class" AS CLASS,
"TDate" AS END_OF_TRANSMISSION,
"TOp" AS END_OF_OPERATION
FROM "payload-psatcat";

/* ===== BLOCK: Block 10 ===== */

/* ===== CODE: SATELLITE1 ===== */

create or replace table SATELLITE1 (
  ID_SATELLITE varchar, 
  SATELLITE_NAME varchar,
  ALTERNATE_NAME varchar,
  ID_OWNER number,
  ID_LAUNCH number,
  AGENCY_NAME varchar,
  PRIMARY KEY (ID_SATELLITE, SATELLITE_NAME)
  );

INSERT INTO SATELLITE1 (ID_SATELLITE, 
                        SATELLITE_NAME, 
                        ALTERNATE_NAME,
                        AGENCY_NAME)
SELECT "Piece" AS ID_SATELLITE, 
        "Name" AS SATELLITE_NAME,
        "PLName" AS ALTERNATE_NAME,
        "Agency" as AGENCY_NAME
FROM "Launchlog-launchlog";

/* ===== BLOCK: Block 11 ===== */

/* ===== CODE: SATELLITE2 ===== */

create or replace table SATELLITE2 (
    PURPOSE varchar,
    EXPECTED_LIFETIME varchar,
    ID_SATELLITE varchar
    );

insert into SATELLITE2 (PURPOSE, EXPECTED_LIFETIME, ID_SATELLITE)
SELECT "Purpose" AS PURPOSE,
        "Expected_Lifetime_yrs" AS EXPECTED_LIFETIME,
        "COSPAR_Number" AS ID_SATELLITE
FROM "UCS-Satellite-Database-5-1-2023-Sheet1";

/* ===== BLOCK: Block 12 ===== */

/* ===== CODE: SATELLITE_ALL ===== */

create or replace table SATELLITE_ALL as
    select 
        S1.ID_SATELLITE, 
        S1.SATELLITE_NAME,
        S1.ALTERNATE_NAME,
        S1.AGENCY_NAME
    from SATELLITE1 as S1
        left join SATELLITE2 as S2
        on S1.ID_SATELLITE = S2.ID_SATELLITE;

ALTER TABLE SATELLITE_ALL
ADD PRIMARY KEY (ID_SATELLITE, SATELLITE_NAME);

--- přidáváme id_owner
ALTER TABLE SATELLITE_ALL
ADD COLUMN ID_OWNER INT;

UPDATE SATELLITE_ALL AS SA
SET SA.ID_OWNER = O.ID_OWNER
FROM OWNER AS O
WHERE SA.ID_SATELLITE = O.ID_SATELLITE;

--- přidáváme id_launch
ALTER TABLE SATELLITE_ALL
ADD COLUMN ID_LAUNCH INT;

UPDATE SATELLITE_ALL AS SA
SET SA.ID_LAUNCH = LF.ID_LAUNCH
FROM LAUNCH_FINALT AS LF
WHERE SA.ID_SATELLITE = LF.PIECE;

--- přidáváme id_agency
ALTER TABLE SATELLITE_ALL
ADD COLUMN ID_AGENCY INT;

UPDATE SATELLITE_ALL AS SA
SET SA.ID_AGENCY = AC.ID_AGENCY
FROM AGENCY_COMPLETE AS AC
WHERE SA.AGENCY_NAME = AC.AGENCY_NAME;

--- přidáváme PURPOSE
ALTER TABLE SATELLITE_ALL
ADD COLUMN PURPOSE varchar,
CLASS varchar,
END_OF_TRANSMISSION varchar,
END_OF_OPERATION varchar;

UPDATE SATELLITE_ALL AS SA
SET SA.PURPOSE = P.PURPOSE,
SA.CLASS = P.CLASS,
SA.END_OF_TRANSMISSION = P.END_OF_TRANSMISSION,
SA.END_OF_OPERATION = P.END_OF_OPERATION
FROM PURPOSE AS P
WHERE SA.ID_SATELLITE = P.ID_SATELLITE;

/* ===== CODE: REMOVE '?' ===== */

UPDATE SATELLITE_ALL 
    SET END_OF_TRANSMISSION = CASE
            WHEN LENGTH("END_OF_TRANSMISSION") = 16
                THEN left ("END_OF_TRANSMISSION", 11)

            WHEN LENGTH("END_OF_TRANSMISSION") = 5
                THEN left ("END_OF_TRANSMISSION", 4)
                
            WHEN LENGTH("END_OF_TRANSMISSION") = 9
                THEN left ("END_OF_TRANSMISSION", 8)

            WHEN LENGTH("END_OF_TRANSMISSION") = 12
                THEN left ("END_OF_TRANSMISSION", 11)

            WHEN LENGTH("END_OF_TRANSMISSION") = 17
                THEN left ("END_OF_TRANSMISSION", 11)

            WHEN LENGTH("END_OF_TRANSMISSION") = 6
                THEN left ("END_OF_TRANSMISSION", 4)

             WHEN LENGTH("END_OF_TRANSMISSION") = 8
                THEN left ("END_OF_TRANSMISSION", 4)

             WHEN LENGTH("END_OF_TRANSMISSION") = 11
                THEN left ("END_OF_TRANSMISSION", 10)

             WHEN LENGTH("END_OF_TRANSMISSION") = 20
                THEN left ("END_OF_TRANSMISSION", 11)

             WHEN LENGTH("END_OF_TRANSMISSION") = 13
                THEN left ("END_OF_TRANSMISSION", 12)

            WHEN LENGTH("END_OF_TRANSMISSION") = 7
                THEN left ("END_OF_TRANSMISSION", 4)

             WHEN LENGTH("END_OF_TRANSMISSION") >= 24
                THEN left ("END_OF_TRANSMISSION", 11)
            ELSE END_OF_TRANSMISSION
            end;

UPDATE SATELLITE_ALL 
    SET END_OF_OPERATION = CASE
            WHEN LENGTH("END_OF_OPERATION") = 16
                THEN left ("END_OF_OPERATION", 11)

            WHEN LENGTH("END_OF_OPERATION") = 5
                THEN left ("END_OF_OPERATION", 4)
                
            WHEN LENGTH("END_OF_OPERATION") = 9
                THEN left ("END_OF_OPERATION", 8)

            WHEN LENGTH("END_OF_OPERATION") = 12
                THEN left ("END_OF_OPERATION", 11)

            WHEN LENGTH("END_OF_OPERATION") = 17
                THEN left ("END_OF_OPERATION", 11)

            WHEN LENGTH("END_OF_OPERATION") = 6
                THEN left ("END_OF_OPERATION", 4)

             WHEN LENGTH("END_OF_OPERATION") = 8
                THEN left ("END_OF_OPERATION", 4)

             WHEN LENGTH("END_OF_OPERATION") = 11
                THEN left ("END_OF_OPERATION", 10)

             WHEN LENGTH("END_OF_OPERATION") = 20
                THEN left ("END_OF_OPERATION", 11)

             WHEN LENGTH("END_OF_OPERATION") = 13
                THEN left ("END_OF_OPERATION", 12)

             WHEN LENGTH("END_OF_OPERATION") = 7
                THEN left ("END_OF_OPERATION", 4)

            WHEN LENGTH("END_OF_OPERATION") >= 24
                THEN left ("END_OF_OPERATION", 11)
            ELSE END_OF_OPERATION
            end;

/* ===== CODE: STATUS COLUMN ===== */

--pridali sloupec status
ALTER TABLE SATELLITE_ALL ADD COLUMN STATUS VARCHAR(255);

--zkopirovali end of transmission do statusu

UPDATE SATELLITE_ALL
SET STATUS = END_OF_TRANSMISSION;

--zmenili hvezdicky na string ve statusu

UPDATE SATELLITE_ALL 
    SET STATUS = CASE
            WHEN LENGTH(STATUS) > 1
                THEN 'No longer transmitting'
            WHEN LENGTH(STATUS) = 1
                THEN 'Still transmitting'
            end;

/* ===== CODE: REPLACE "*" TO NULL ===== */

UPDATE SATELLITE_ALL 
    SET END_OF_TRANSMISSION = CASE
            WHEN LENGTH(END_OF_TRANSMISSION) = 1
                THEN NULL
            ELSE END_OF_TRANSMISSION
            end;

UPDATE SATELLITE_ALL 
    SET END_OF_OPERATION = CASE
            WHEN LENGTH(END_OF_OPERATION) = 1
                THEN NULL
            ELSE END_OF_OPERATION
            end;

/* ===== BLOCK: Block 13 ===== */

/* ===== CODE: DATE_TABLE ===== */

CREATE OR REPLACE TABLE DATE_TABLE AS
    SELECT CAST(DATEADD(DAY, seq4(),'1957-10-04') AS DATE) AS TI_DATE
        , TO_CHAR(TI_DATE, 'YYYY MON DD') AS FULL_DATE
        , DAY(TI_DATE) AS TI_DAY
        , MONTH(TI_DATE) AS TI_MONTH
        , YEAR(TI_DATE) AS TI_YEAR
        , DAYNAME(TI_DATE) AS DAY_NAME
        , DAYOFWEEK(TI_DATE) AS NUMBER_DAY
        , TO_CHAR(TI_DATE, 'MON') AS MONTH_NAME
        , TO_CHAR(TI_DATE, 'YYYY MON') AS YEAR_MONTH
        , CONCAT('Q', QUARTER(TI_DATE)) AS QUARTER
        , CONCAT(TI_YEAR, '/', QUARTER) AS YEAR_QUARTER
  FROM TABLE(GENERATOR(ROWCOUNT => 24472)) v 
  ORDER BY 1;

/* ===== BLOCK: Block 14 ===== */

/* ===== CODE: DROP COLUMNS agency_name, piece, piece_ls ===== */

ALTER TABLE SATELLITE_ALL DROP COLUMN AGENCY_NAME;

ALTER TABLE LAUNCH_FINALT DROP COLUMN PIECE;

ALTER TABLE LAUNCH_SITE_ALLT DROP COLUMN PIECE_LS;

/* ===== BLOCK: Block 15 ===== */

/* ===== CODE: SEPARATION INTO YEAR, MONTH,DAY ===== */

ALTER TABLE SATELLITE_ALL ADD COLUMN ET_YEAR VARCHAR;

ALTER TABLE SATELLITE_ALL ADD COLUMN ET_MONTH VARCHAR;

ALTER TABLE SATELLITE_ALL ADD COLUMN ET_DAY VARCHAR;

ALTER TABLE SATELLITE_ALL ADD COLUMN OT_YEAR VARCHAR;

ALTER TABLE SATELLITE_ALL ADD COLUMN OT_MONTH VARCHAR;

ALTER TABLE SATELLITE_ALL ADD COLUMN OT_DAY VARCHAR;

-- VKLADAME ROK,MESIC A DEN Z TABULKY END OF TRANSMISSION
UPDATE SATELLITE_ALL
SET 
    ET_YEAR = TRIM(SUBSTR(END_OF_TRANSMISSION, 1, 4)),
    ET_MONTH = CASE
        WHEN END_OF_TRANSMISSION LIKE '% Jan%' THEN '01'
        WHEN END_OF_TRANSMISSION LIKE '% Feb%' THEN '02'
        WHEN END_OF_TRANSMISSION LIKE '% Mar%' THEN '03'
        WHEN END_OF_TRANSMISSION LIKE '% Apr%' THEN '04'
        WHEN END_OF_TRANSMISSION LIKE '% May%' THEN '05'
        WHEN END_OF_TRANSMISSION LIKE '% Jun%' THEN '06'
        WHEN END_OF_TRANSMISSION LIKE '% Jul%' THEN '07'
        WHEN END_OF_TRANSMISSION LIKE '% Aug%' THEN '08'
        WHEN END_OF_TRANSMISSION LIKE '% Sep%' THEN '09'
        WHEN END_OF_TRANSMISSION LIKE '% Oct%' THEN '10'
        WHEN END_OF_TRANSMISSION LIKE '% Nov%' THEN '11'
        WHEN END_OF_TRANSMISSION LIKE '% Dec%' THEN '12'
        ELSE NULL
    END,
    ET_DAY = TRIM(
        CASE
            WHEN LENGTH(END_OF_TRANSMISSION) > 8 THEN SUBSTR(END_OF_TRANSMISSION, -2, 2)
            ELSE NULL
        END);

-- VKLADAME ROK,MESIC A DEN Z TABULKY END OF OPERATION
UPDATE SATELLITE_ALL
SET 
    OT_YEAR = TRIM(SUBSTR(END_OF_OPERATION, 1, 4)),
    OT_MONTH = CASE
        WHEN END_OF_OPERATION LIKE '% Jan%' THEN '01'
        WHEN END_OF_OPERATION LIKE '% Feb%' THEN '02'
        WHEN END_OF_OPERATION LIKE '% Mar%' THEN '03'
        WHEN END_OF_OPERATION LIKE '% Apr%' THEN '04'
        WHEN END_OF_OPERATION LIKE '% May%' THEN '05'
        WHEN END_OF_OPERATION LIKE '% Jun%' THEN '06'
        WHEN END_OF_OPERATION LIKE '% Jul%' THEN '07'
        WHEN END_OF_OPERATION LIKE '% Aug%' THEN '08'
        WHEN END_OF_OPERATION LIKE '% Sep%' THEN '09'
        WHEN END_OF_OPERATION LIKE '% Oct%' THEN '10'
        WHEN END_OF_OPERATION LIKE '% Nov%' THEN '11'
        WHEN END_OF_OPERATION LIKE '% Dec%' THEN '12'
        ELSE NULL
    END,
    OT_DAY = TRIM(
        CASE
            WHEN LENGTH(END_OF_OPERATION) > 8 THEN SUBSTR(END_OF_OPERATION, -2, 2)
            ELSE NULL
        END);

/* ===== CODE: ADDING OF 01 ===== */

-- KDE JSOU NULLY VE MESICE NEBO DNE ALE ZAROVEN VE STATUSU JE NECO NASPSANO A ROK NENI NULL, PRIDAVAME 01    
UPDATE SATELLITE_ALL
SET 
    ET_MONTH = CASE 
        WHEN ET_MONTH IS NULL AND (STATUS = 'No longer transmitting') THEN '01'
        ELSE ET_MONTH
    END,
    ET_DAY = CASE 
        WHEN ET_DAY IS NULL AND (STATUS = 'No longer transmitting') THEN '01'
        ELSE ET_DAY
    END
WHERE 
    ET_YEAR IS NOT NULL;

UPDATE SATELLITE_ALL
SET 
    OT_MONTH = CASE 
        WHEN OT_MONTH IS NULL AND (STATUS = 'No longer transmitting') THEN '01'
        ELSE OT_MONTH
    END,
    OT_DAY = CASE 
        WHEN OT_DAY IS NULL AND (STATUS = 'No longer transmitting') THEN '01'
        ELSE OT_DAY
    END
WHERE 
    OT_YEAR IS NOT NULL;

/* ===== CODE: TRANSMISSION_END, OPERATION_END ===== */

--NAHRADIME MEZERY NULL PROTOZE UKAZUJOU VE DETAILU A S NIMA NEDA VYTVARIT DATUM 
UPDATE SATELLITE_ALL
SET ET_DAY = NULL
WHERE ET_DAY = '';

-- PRIDAVAME KONECNE SLOUPCI
ALTER TABLE SATELLITE_ALL ADD COLUMN TRANSMISSION_END DATE;

ALTER TABLE SATELLITE_ALL ADD COLUMN OPERATION_END DATE;

-- PRIDAVAME CELY DATUM ZE JEDNOTLIVYCH SLOUPCI
UPDATE SATELLITE_ALL
SET TRANSMISSION_END = DATE_FROM_PARTS(ET_YEAR::INT, ET_MONTH::INT, ET_DAY::INT)
WHERE ET_YEAR IS NOT NULL 
AND ET_MONTH IS NOT NULL 
AND ET_DAY IS NOT NULL;

-- PRIDAVAME CELY DATUM ZE JEDNOTLIVYCH SLOUPCI
UPDATE SATELLITE_ALL
SET OPERATION_END = DATE_FROM_PARTS(OT_YEAR::INT, OT_MONTH::INT, OT_DAY::INT)
WHERE OT_YEAR IS NOT NULL 
AND OT_MONTH IS NOT NULL 
AND OT_DAY IS NOT NULL;

/* ===== CODE: DROP UNNESSESARY COLUMNS ===== */

--ZBAVIME SE VSECH SLOUPCU KTERE NEPOTREBUJEME

ALTER TABLE SATELLITE_ALL DROP COLUMN OT_DAY;

ALTER TABLE SATELLITE_ALL DROP COLUMN OT_MONTH;

ALTER TABLE SATELLITE_ALL DROP COLUMN OT_YEAR;

ALTER TABLE SATELLITE_ALL DROP COLUMN ET_DAY;

ALTER TABLE SATELLITE_ALL DROP COLUMN ET_MONTH;

ALTER TABLE SATELLITE_ALL DROP COLUMN ET_YEAR;

ALTER TABLE SATELLITE_ALL DROP COLUMN END_OF_TRANSMISSION;

ALTER TABLE SATELLITE_ALL DROP COLUMN END_OF_OPERATION;

/* ===== BLOCK: Block 16 ===== */

/* ===== CODE: CLEANING LAUNCH_SITE_ALLT ===== */

DELETE FROM LAUNCH_SITE_ALLT WHERE LS_NAME = '# Updated 2024 Oct 14 17:49:50';

/* ===== BLOCK: Block 17 ===== */

/* ===== CODE: OWNER: UPDATED_FULL_NAME ===== */

ALTER TABLE OWNER ADD COLUMN UPDATED_FULL_NAME VARCHAR;

UPDATE OWNER 
SET UPDATED_FULL_NAME = FCN.UPDATED_FULL_NAME 
FROM "fixed_name-Sheet1" AS FCN 
WHERE OWNER.OWNER_COUNTRY = FCN.OWNER_COUNTRY;

/* ===== CODE: OWNER: FIXED_CODE ===== */

UPDATE OWNER
SET OWNER_COUNTRY = FCT.FIXED_CODE
FROM "FIXED_CODE-Sheet1" AS FCT
WHERE OWNER.OWNER_COUNTRY = FCT.OWNER_COUNTRY;

/* ===== CODE: OWNER:REGION_CONTINENT ===== */

ALTER TABLE OWNER ADD COLUMN REGION VARCHAR;

ALTER TABLE OWNER ADD COLUMN CONTINENT VARCHAR;

UPDATE OWNER
SET REGION = RC.BUSINESS_REGION
FROM "REGION_CONTINENT-Sheet1" AS RC
WHERE OWNER.OWNER_COUNTRY = RC.OWNER_COUNTRY;

UPDATE OWNER
SET CONTINENT = RC.CONTINENT
FROM "REGION_CONTINENT-Sheet1" AS RC
WHERE OWNER.OWNER_COUNTRY = RC.OWNER_COUNTRY;

/* ===== BLOCK: Block 18 ===== */

/* ===== CODE: AGENCY_COMPLETE:CODE ===== */

UPDATE AGENCY_COMPLETE AS ACM
SET AGENCY_COUNTRY = ACD.AGENCY_CODE
FROM "AGENCY_COUNTRY_CODE-Sheet1" AS ACD
WHERE ACM.AGENCY_COUNTRY = ACD.AGENCY_COUNTRY;

/* ===== CODE: AGENCY:NAME_REGION_CONTINENT ===== */

ALTER TABLE AGENCY_COMPLETE ADD COLUMN AG_FULL_COUNTRY_NAME VARCHAR;

ALTER TABLE AGENCY_COMPLETE ADD COLUMN AG_REGION VARCHAR;

ALTER TABLE AGENCY_COMPLETE ADD COLUMN AG_CONTINENT VARCHAR;

UPDATE AGENCY_COMPLETE AS AC
SET AG_FULL_COUNTRY_NAME = ANRC.AG_COUNTRY_NAME
FROM "AG_NAME_REGION_CONTINENT-Sheet1" AS ANRC
WHERE AC.AGENCY_COUNTRY = ANRC.AGENCY_CODE;

UPDATE AGENCY_COMPLETE AS AC
SET AG_REGION = ANRC.AG_REGION
FROM "AG_NAME_REGION_CONTINENT-Sheet1" AS ANRC
WHERE AC.AGENCY_COUNTRY = ANRC.AGENCY_CODE;

UPDATE AGENCY_COMPLETE AS AC
SET AG_CONTINENT = ANRC.AG_CONTINENT
FROM "AG_NAME_REGION_CONTINENT-Sheet1" AS ANRC
WHERE AC.AGENCY_COUNTRY = ANRC.AGENCY_CODE;

/* ===== BLOCK: Block 19 ===== */

/* ===== CODE: LS:NEW_CODE ===== */

UPDATE LAUNCH_SITE_ALLT AS LSA
SET LS_COUNTRY = LNC.LS_NEW_CODE
FROM "LS_NEW_CODE_TABLE-Sheet1" AS LNC
WHERE LSA.LS_COUNTRY = LNC.LS_COUNTRY;

/* ===== CODE: LS:NAME_REGION_CONT ===== */

ALTER TABLE LAUNCH_SITE_ALLT ADD COLUMN LS_FULL_COUNTRY VARCHAR;

ALTER TABLE LAUNCH_SITE_ALLT ADD COLUMN LS_REGION VARCHAR;

ALTER TABLE LAUNCH_SITE_ALLT ADD COLUMN LS_CONTINENT VARCHAR;

UPDATE LAUNCH_SITE_ALLT AS LSAT
SET LS_FULL_COUNTRY = LSNRC.LS_FULL_COUNTRY_NAME
FROM "LS_NAME_REGION_CONT-Sheet1" AS LSNRC
WHERE LSAT.LS_COUNTRY = LSNRC.LS_NEW_CODE;

UPDATE LAUNCH_SITE_ALLT AS LSAT
SET LS_REGION = LSNRC.LS_REGION
FROM "LS_NAME_REGION_CONT-Sheet1" AS LSNRC
WHERE LSAT.LS_COUNTRY = LSNRC.LS_NEW_CODE;

UPDATE LAUNCH_SITE_ALLT AS LSAT
SET LS_CONTINENT = LSNRC.LS_CONTINENT
FROM "LS_NAME_REGION_CONT-Sheet1" AS LSNRC
WHERE LSAT.LS_COUNTRY = LSNRC.LS_NEW_CODE;

/* ===== BLOCK: Block 20 ===== */

/* ===== CODE: SATELLITE_ALL:PURPOSE, PURPOSE_NAME ===== */

UPDATE SATELLITE_ALL AS SA
SET PURPOSE = CNP.PURPOSE_FIX
FROM "CODE_NAME_PURPOSE-Sheet1" AS CNP
WHERE SA.PURPOSE = CNP.PURPOSE;

ALTER TABLE SATELLITE_ALL ADD COLUMN PURPOSE_NAME VARCHAR;

UPDATE "CODE_NAME_PURPOSE-Sheet1" AS CNP
SET PURPOSE_NAME = CNP1.PURPOSE_NAME
FROM "CODE_NAME_PURPOSE-Sheet1" AS CNP1
WHERE CNP.PURPOSE_FIX = CNP1.PURPOSE_FIX
  AND CNP.PURPOSE_NAME IS NULL
  AND CNP1.PURPOSE_NAME IS NOT NULL;

UPDATE SATELLITE_ALL AS SA
SET PURPOSE_NAME = CNP.PURPOSE_NAME
FROM "CODE_NAME_PURPOSE-Sheet1" AS CNP
WHERE SA.PURPOSE = CNP.PURPOSE_FIX;

